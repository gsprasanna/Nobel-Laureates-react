{"version":3,"sources":["assets/images/NobelPrizeIcon.jpeg","assets/images/loading.gif","routes/routes.js","Components/PrizeCategory.jsx","Components/LoadingIndicator.js","Pages/NobelPrizeCategories/NobelPrizeCategories.jsx","Constants/ServerUrls.js","Services/fetchData.js","Components/LaureatesSummary.js","Pages/NobelLaureates/NobelLaureates.jsx","Components/Footer.js","Components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","routes","category","PrizeCategory","prizeCategory","Col","md","to","replace","Card","className","Img","variant","src","NobelPrizeLogo","Body","Title","LoadingIndicator","require","alt","React","Component","NobelPrizeCategories","state","prizeCategories","this","props","length","CardDeck","map","categoryIndex","key","GET_PRIZE_API","GET_LAUREATES_API","fetchData","route","requestUrl","Promise","resolve","reject","fetch","then","response","json","data","catch","error","LaureatesSummary","laureatesList","year","details","Array","isArray","laureates","Index","laureatesDetails","find","x","id","Media","body","firstname","bornCountry","born","gender","style","border","NobelLaureates","selectedCategory","loadNobelLaureatesData","a","setState","console","match","params","categoriesList","prizes","filter","prize","sort","b","sticky","laureatesItem","placeholder","Footer","href","Header","Navbar","bg","Brand","width","height","App","loadNobelPrizeCategoryData","getCategories","value","index","_arr","indexOf","history","location","pathname","push","exact","path","render","withRouter","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,6C,iGCA3CD,EAAOC,QAAU,IAA0B,qC,6KCI5BC,EAJA,CACbC,SAAU,oC,iCCyBGC,EAnBO,SAAC,GAA4B,IAAD,IAAzBC,qBAAyB,MAAT,GAAS,EAChD,OACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAAC,IAAD,CAASC,GAAIN,EAAOC,SAASM,QAAQ,YAAaJ,IAChD,kBAACK,EAAA,EAAD,CAAMC,UAAU,aACd,kBAACD,EAAA,EAAKE,IAAN,CAAUC,QAAQ,MAAMC,IAAKC,MAC7B,kBAACL,EAAA,EAAKM,KAAN,KACE,kBAACN,EAAA,EAAKO,MAAN,KAAaZ,EAAb,qBCFGa,E,iLARX,OACE,6BACE,yBAAKJ,IAAKK,EAAQ,IAAiCC,IAAK,iB,GAJjCC,IAAMC,W,QC6BtBC,E,2MAzBbC,MAAQ,CACNC,gBAAiB,I,wEAET,IACAA,EAAoBC,KAAKC,MAAzBF,gBACR,OACE,yBAAKd,UAAU,aACb,wBAAIA,UAAU,OAAd,0BAECc,EAAgBG,OACf,kBAACC,EAAA,EAAD,CAAUlB,UAAU,aACjBc,EAAgBK,KAAI,SAAC3B,EAAU4B,GAC9B,OACE,kBAAC,EAAD,CAAe1B,cAAeF,EAAU6B,IAAKD,QAKnD,kBAAC,EAAD,W,GAnByBT,aCHtBW,EAAgB,cAEhBC,EAAoB,iBCalBC,EAfG,SAAAC,GAChB,IAAMC,EDHsB,+BCGQD,EAEpC,OAAO,IAAIE,SAAQ,SAACC,EAASC,GAC3BC,MAAMJ,GACHK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJN,EAAQM,MAETC,OAAM,SAAAC,GACLP,EAAOO,U,QCsDAC,EA7DU,SAAC,GAKnB,IAJLC,EAII,EAJJA,cAII,IAHJC,YAGI,MAHG,GAGH,MAFJ/C,gBAEI,MAFO,GAEP,EADJgD,EACI,EADJA,QAEA,OACE,oCACGC,MAAMC,QAAQJ,GACbA,EAAcrB,OACZqB,EAAcnB,KAAI,SAACwB,EAAWC,GAC5B,IAAIC,EAAmBL,EAAQM,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAOL,EAAUK,MAC5D,OACE,oCACE,kBAACC,EAAA,EAAD,CAAO5B,IAAKuB,GACV,kBAACK,EAAA,EAAD,CAAOC,MAAI,GACT,kBAACD,EAAA,EAAD,CAAOjD,UAAU,gBACf,4BAAK2C,EAAUQ,YAEjB,kBAACF,EAAA,EAAD,eAAeV,GACf,kBAACU,EAAA,EAAD,yBAAyBzD,GACzB,kBAACyD,EAAA,EAAD,iBAEmC,MAAhCJ,EAAiBO,YACd,KACAP,EAAiBO,aAEvB,6BACA,kBAACH,EAAA,EAAD,uBAE4B,MAAzBJ,EAAiBQ,KACd,KACAR,EAAiBQ,MAEvB,kBAACJ,EAAA,EAAD,gBAE8B,MAA3BJ,EAAiBS,OACd,KACAT,EAAiBS,UAI3B,wBAAIC,MAAO,CAAEC,OAAQ,4BAK3B,kBAAC,EAAD,MAGF,kBAAC,WAAD,Q,iBCUOC,E,2MAzDb5C,MAAQ,CACNyB,cAAe,GACfoB,iBAAkB,GAClBb,iBAAkB,I,EAgBpBc,uB,sBAAyB,4BAAAC,EAAA,+EAEUpC,EAAUD,EAAmB,OAFvC,OAEfsB,EAFe,OAGrB,EAAKgB,SAAS,CAAEhB,iBAAkBA,EAAiBF,YAH9B,gDAKrBmB,QAAQ1B,MAAR,MALqB,yD,mFAdL,MAEKrB,KAAKC,MAApB+C,MAFU,cAEF,GAFE,GAGVC,OAHU,cAGD,GAHC,GAIVxE,SAAUkE,OAJA,MAImB,GAJnB,EAKlB3C,KAAK8C,SAAS,CAAEH,iBAAkBA,IAClC,IAIMpB,EAJiBvB,KAAKC,MAAMiD,eACQC,OAAOC,QAC/C,SAAAC,GAAK,OAAIA,EAAK,WAAiBV,KAEQW,MAAK,SAACT,EAAGU,GAAJ,OAAUA,EAAE/B,KAAOqB,EAAErB,QACnExB,KAAK8C,SAAS,CAAEvB,kBAChBvB,KAAK4C,2B,+BAUG,IAAD,EACqC5C,KAAKF,MAAzCyB,EADD,EACCA,cAAeO,EADhB,EACgBA,iBAEvB,OACE,yBAAK7C,UAAU,aACb,wBAAIA,UAAU,MAAMuE,OAAO,OACxB,uBAEFjC,EAAcrB,QAAU4B,EAAiB5B,OACxCqB,EAAcnB,KAAI,SAACqD,EAAe5B,GAChC,OACE,kBAAC,IAAD,CAAUvB,IAAKuB,EAAO6B,YAAa,kBAAC,EAAD,OACjC,kBAAC,EAAD,CACEnC,cAAekC,EAAc7B,UAC7BJ,KAAMiC,EAAcjC,KACpB/C,SAAUgF,EAAchF,SACxB6B,IAAKuB,EACLJ,QAASK,QAMjB,kBAAC,EAAD,W,GAnDmBlC,aCOd+D,EAZA,WACb,OACE,4BAAQ1E,UAAU,+BAChB,yBAAKA,UAAU,qCAAf,uCAEE,uBAAG2E,KAAK,uDAAR,UACA,uBAAGA,KAAK,oCAAR,YACA,uBAAGA,KAAK,8CAAR,gB,QCWOC,EAhBA,WACb,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAO5E,QAAQ,OAAOqE,OAAO,OACtC,kBAACM,EAAA,EAAOE,MAAR,CAAcJ,KAAK,gDACjB,yBACElE,IAAI,OACJN,IAAKC,IACL4E,MAAM,KACNC,OAAO,KACPjF,UAAU,6BAEX,qBCJHkF,E,2MACJrE,MAAQ,CACNC,gBAAiB,GACjBmD,eAAgB,I,EASlBkB,2B,sBAA6B,8BAAAvB,EAAA,+EAEGpC,EAAUF,EAAe,OAF5B,OAEnB8D,EAFmB,OAGnBtE,EAAkBsE,EAAclB,OACnC/C,KAAI,SAAAkE,GAAK,OAAIA,EAAM7F,YACnB2E,QAAO,SAACkB,EAAOC,EAAOC,GAAf,OAAwBA,EAAKC,QAAQH,KAAWC,KAC1D,EAAKzB,SAAS,CAAE/C,kBAAiBmD,eAAgBmB,IANxB,gDAQzBtB,QAAQ1B,MAAR,MARyB,yD,mFAPR,IAAD,EACYrB,KAAKC,MAA3ByE,EADU,EACVA,QACkB,MAFR,EACDC,SACJC,UACXF,EAAQG,KAAK,0BAEf7E,KAAKoE,+B,+BAaG,IAAD,EACqCpE,KAAKF,MAAzCC,EADD,EACCA,gBAAiBmD,EADlB,EACkBA,eACzB,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CACE4B,OAAK,EACLC,KAAM,yBACNC,OAAQ,kBACN,kBAAC,EAAD,CAAsBjF,gBAAiBA,OAG3C,kBAAC,IAAD,CACE+E,OAAK,EACLC,KAAMvG,EAAOC,SACbuG,OAAQ,SAAA/E,GAAK,OACX,kBAAC,EAAD,iBAAoBA,EAApB,CAA2BiD,eAAgBA,QAG/C,kBAAC,EAAD,W,GA1CUtD,aAgDHqF,cAAWd,G,MC/CNe,QACW,cAA7BC,OAAOR,SAASS,UAEe,UAA7BD,OAAOR,SAASS,UAEhBD,OAAOR,SAASS,SAASpC,MACvB,2DCVNqC,IAASL,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFM,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1E,MAAK,SAAA2E,GACjCA,EAAaC,kB","file":"static/js/main.60e7ca16.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/NobelPrizeIcon.03a02e72.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/loading.81c29bc5.gif\";","const routes = {\n  category: \"/Nobel-Laureates-react/:category\"\n};\n\nexport default routes;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { NavLink } from \"react-router-dom\";\nimport routes from \"../routes/routes\";\nimport NobelPrizeLogo from \"../assets/images/NobelPrizeIcon.jpeg\";\nimport { Card, Col } from \"react-bootstrap/\";\n\nconst PrizeCategory = ({ prizeCategory = \"\" }) => {\n  return (\n    <Col md={3}>\n      <NavLink to={routes.category.replace(\":category\", prizeCategory)}>\n        <Card className=\"col-md-12\">\n          <Card.Img variant=\"top\" src={NobelPrizeLogo} />\n          <Card.Body>\n            <Card.Title>{prizeCategory}   </Card.Title>\n          </Card.Body>\n        </Card>\n      </NavLink>\n    </Col>\n  );\n};\n\nPrizeCategory.propTypes = {\n  prizeCategory: PropTypes.string.isRequired\n};\n\nexport default PrizeCategory;\n","import React from \"react\";\n\nclass LoadingIndicator extends React.Component {\n  render() {\n    return (\n      <div>\n        <img src={require(\"../assets/images/loading.gif\")} alt={\"loading\"} />\n      </div>\n    );\n  }\n}\n\nexport default LoadingIndicator;\n","import React, { Component } from \"react\";\nimport PrizeCategory from \"../../Components/PrizeCategory\";\nimport LoadingIndicator from \"../../Components/LoadingIndicator\";\nimport { CardDeck } from \"react-bootstrap/\";\n\nclass NobelPrizeCategories extends Component {\n  state = {\n    prizeCategories: []\n  };\n  render() {\n    const { prizeCategories } = this.props;\n    return (\n      <div className=\"container\">\n        <h3 className=\"App\">Nobel Prize Categories</h3>\n\n        {prizeCategories.length ? (\n          <CardDeck className=\"col-md-12\">\n            {prizeCategories.map((category, categoryIndex) => {\n              return (\n                <PrizeCategory prizeCategory={category} key={categoryIndex} />\n              );\n            })}\n          </CardDeck>\n        ) : (\n          <LoadingIndicator />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default NobelPrizeCategories;\n","export const PRIMARY_SERVER = \"http://api.nobelprize.org/v1\";\n\nexport const GET_PRIZE_API = \"/prize.json\";\n\nexport const GET_LAUREATES_API = \"/laureate.json\";\n\nexport const GET_COUNTRY_API = \"/country.json\";\n","import { PRIMARY_SERVER } from \"../Constants/ServerUrls\";\n\nconst fetchData = route => {\n  const requestUrl = PRIMARY_SERVER + route;\n\n  return new Promise((resolve, reject) => {\n    fetch(requestUrl)\n      .then(response => response.json())\n      .then(data => {\n        resolve(data);\n      })\n      .catch(error => {\n        reject(error);\n      });\n  });\n};\n\nexport default fetchData;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport LoadingIndicator from \"./LoadingIndicator\";\nimport { Media } from \"reactstrap\";\n\nconst LaureatesSummary = ({\n  laureatesList,\n  year = \"\",\n  category = \"\",\n  details\n}) => {\n  return (\n    <>\n      {Array.isArray(laureatesList) ? (\n        laureatesList.length ? (\n          laureatesList.map((laureates, Index) => {\n            let laureatesDetails = details.find(x => x.id === laureates.id);\n            return (\n              <>\n                <Media key={Index}>\n                  <Media body>\n                    <Media className=\"header-color\">\n                      <h2>{laureates.firstname}</h2>\n                    </Media>\n                    <Media>Year : {year}</Media>\n                    <Media>Prize Category : {category}</Media>\n                    <Media>\n                      Country :\n                      {laureatesDetails.bornCountry == null\n                        ? \"NA\"\n                        : laureatesDetails.bornCountry}\n                    </Media>\n                    <br />\n                    <Media>\n                      Date of Birth :\n                      {laureatesDetails.born == null\n                        ? \"NA\"\n                        : laureatesDetails.born}\n                    </Media>\n                    <Media>\n                      Gender :\n                      {laureatesDetails.gender == null\n                        ? \"NA\"\n                        : laureatesDetails.gender}\n                    </Media>\n                  </Media>\n                </Media>\n                <hr style={{ border: \"1px dashed crimson\" }} />\n              </>\n            );\n          })\n        ) : (\n          <LoadingIndicator />\n        )\n      ) : (\n        <Fragment></Fragment>\n      )}\n    </>\n  );\n};\n\nLaureatesSummary.propTypes = {\n  category: PropTypes.string.isRequired,\n  year: PropTypes.string.isRequired\n};\n\nexport default LaureatesSummary;\n","import React, { Component } from \"react\";\nimport fetchData from \"../../Services/fetchData\";\nimport { GET_LAUREATES_API } from \"../../Constants/ServerUrls\";\nimport LoadingIndicator from \"../../Components/LoadingIndicator\";\nimport LaureatesSummary from \"../../Components/LaureatesSummary\";\nimport LazyLoad from \"react-lazyload\";\n\nclass NobelLaureates extends Component {\n  state = {\n    laureatesList: [],\n    selectedCategory: \"\",\n    laureatesDetails: []\n  };\n  componentDidMount() {\n    debugger;\n    const { match = {} } = this.props;\n    const { params = {} } = match;\n    const { category: selectedCategory = \"\" } = params;\n    this.setState({ selectedCategory: selectedCategory });\n    const categoriesList = this.props.categoriesList;\n    const filteredCategories = categoriesList.prizes.filter(\n      prize => prize[\"category\"] === selectedCategory\n    );\n    const laureatesList = filteredCategories.sort((a, b) => b.year - a.year);\n    this.setState({ laureatesList });\n    this.loadNobelLaureatesData();\n  }\n  loadNobelLaureatesData = async () => {\n    try {\n      const laureatesDetails = await fetchData(GET_LAUREATES_API, \"GET\");\n      this.setState({ laureatesDetails: laureatesDetails.laureates });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  render() {\n    const { laureatesList, laureatesDetails } = this.state;\n    debugger;\n    return (\n      <div className=\"container\">\n        <h3 className=\"App\" sticky=\"top\">\n          {\"Nobel Prize Winners\"}\n        </h3>\n        {laureatesList.length && laureatesDetails.length ? (\n          laureatesList.map((laureatesItem, Index) => {\n            return (\n              <LazyLoad key={Index} placeholder={<LoadingIndicator />}>\n                <LaureatesSummary\n                  laureatesList={laureatesItem.laureates}\n                  year={laureatesItem.year}\n                  category={laureatesItem.category}\n                  key={Index}\n                  details={laureatesDetails}\n                />\n              </LazyLoad>\n            );\n          })\n        ) : (\n          <LoadingIndicator />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default NobelLaureates;\n","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <footer className=\"page-footer font-small blue\">\n      <div className=\"footer-copyright text-center py-3\">\n        Made with &#10084; by Prasanna Balaji.\n        <a href=\"https://github.com/gsprasanna/Nobel-Laureates-react\">Github</a>\n        <a href=\"https://twitter.com/Prasanna_GS_\"> Twitter</a>\n        <a href=\"https://linkedin.com/in/prasanna-balaji-gs\"> LinkedIn</a>\n      </div>\n    </footer>\n  );\n};\nexport default Footer;\n","import React from \"react\";\nimport { Navbar } from \"react-bootstrap\";\nimport NobelPrizeLogo from \"../assets/images/NobelPrizeIcon.jpeg\";\n\nconst Header = () => {\n  return (\n    <Navbar bg=\"info\" variant=\"dark\" sticky=\"top\">\n      <Navbar.Brand href=\"https://gsprasanna.github.io/Nobel-Laureates\">\n        <img\n          alt=\"logo\"\n          src={NobelPrizeLogo}\n          width=\"30\"\n          height=\"30\"\n          className=\"d-inline-block align-top\"\n        />\n        {\"THE NOBEL PRIZE\"}\n      </Navbar.Brand>\n    </Navbar>\n  );\n};\nexport default Header;\n","import React, { Component } from \"react\";\nimport { Route, withRouter } from \"react-router-dom\";\nimport \"./App.css\";\nimport NobelPrizeCategories from \"./Pages/NobelPrizeCategories/NobelPrizeCategories\";\nimport routes from \"./routes/routes\";\nimport NobelLaureates from \"./Pages/NobelLaureates/NobelLaureates\";\nimport Footer from \"./Components/Footer\";\nimport Header from \"./Components/Header\";\nimport { GET_PRIZE_API } from \"./Constants/ServerUrls\";\nimport fetchData from \"./Services/fetchData\";\n\nclass App extends Component {\n  state = {\n    prizeCategories: [],\n    categoriesList: []\n  };\n  componentDidMount() {\n    const { history, location } = this.props;\n    if (location.pathname === \"/\") {\n      history.push(\"/Nobel-Laureates-react\");\n    }\n    this.loadNobelPrizeCategoryData();\n  }\n  loadNobelPrizeCategoryData = async () => {\n    try {\n      const getCategories = await fetchData(GET_PRIZE_API, \"GET\");\n      const prizeCategories = getCategories.prizes\n        .map(value => value.category)\n        .filter((value, index, _arr) => _arr.indexOf(value) === index);\n      this.setState({ prizeCategories, categoriesList: getCategories });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  render() {\n    const { prizeCategories, categoriesList } = this.state;\n    return (\n      <div>\n        <Header />\n        <Route\n          exact\n          path={\"/Nobel-Laureates-react\"}\n          render={() => (\n            <NobelPrizeCategories prizeCategories={prizeCategories} />\n          )}\n        />\n        <Route\n          exact\n          path={routes.category}\n          render={props => (\n            <NobelLaureates {...props} categoriesList={categoriesList} />\n          )}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}